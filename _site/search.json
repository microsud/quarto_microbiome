[
  {
    "objectID": "Automate Microbiome Analysis Using Quarto.html",
    "href": "Automate Microbiome Analysis Using Quarto.html",
    "title": "Automate Microbiome Analysis Using Quarto",
    "section": "",
    "text": "As a microbiome researcher, we are often working on different data sets. One thing we have to acknowledge is the fact that several basic analysis are same. We look at the data in few steps, quality check, calculating and visualization of alpha and beta diversity as well the compostion between groups. These are standard tasks that are routinely performed. We usually end up copy pasting codes or if we forget repeat the procedure of writing code and searching stack overflow or GitHub issues.\nWhat if we could automate these analysis? Recently, I was intrigued by discussions around the development of Quarto by Posit (formerly RStudio).\nIf you are already using Rmarkdown (.rmd) you will find the quarto document (.qmd) very similar. Below you can see an simple example. Here, the analysis includes reading the phyloseq object stored as *.rds file, calculating reads per sample, Shannon diversity, Observed ASVs and investigating if there is a correlation between reads per sample and Shannon diversity, Observed ASVs.\nBecause all you’re doing is writing a small example script, you just grab a few variables at random and plot them in a pretty simple Quarto document. That .qmd looks like this:\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: true\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n---\n\n## Load libraries  \n```{r}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Read Data  \n```{r}\npseq <- readRDS(\"data/FuentesIliGutData.rds\")\n```\n\n## Check Reads  \n```{r}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\npseq |> \n    microbiome::meta() |> \n    ggplot(aes(ILI, reads.per.sample)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\n\nNote here that we have higher reads/sample in L2 group.  \n## Alpha diversity  \n```{r}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes(ILI, shannon)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes(ILI, observed)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation  \nCheck if reads per sample is correlated to Shannon diversity \n\n```{r}\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, shannon)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, observed)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{r}\nsessionInfo()\n```\nThis simple task is pretty much repeated for every 16S rRNA gene profiling project that I am involved. Seems redundant to write/copy the codes everything. Here two things will change based on the project, the input phyloseq object and the primary variable of interest i.e. ILI.\nHere, quarto is handy with its params options. Which can be specified as shown below.\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: true\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\nNotice the pseq_path: pseq_path and primary_var: primary_var. These are the ‘floating’ variables. We can write a simple function that will process the .qmd file which we call ‘basic_analysis.qmd’ see here and store it in our RProject directory. Below is the draft of this file.\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: true\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\n\n## Load libraries\n\n```{r}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Define parameters  \n```{r}\npseq_path = params$pseq_path\nprimary_var = params$primary_var\n```\n\n\n## Read Data\n```{r}\npseq <- readRDS(pseq_path)\n```\n\n## Check Reads\n```{r}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\n\n# notice here the use of ase_string instead of aes for ggplot. Since our primary variable 'primary_var' will be in quotes, we can use this handy option in ggplot2  \npseq |> \n    microbiome::meta() |> \n    ggplot(aes_string(primary_var, \"reads.per.sample\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\nNote here that we have higher reads/sample in L2 group.\\\n\n## Alpha diversity\n```{r}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"shannon\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"observed\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation\nCheck if reads per sample is correlated to Shannon diversity\n```{r}\n\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"shannon\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"observed\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{r}\nsessionInfo()\n```\nNow to render this report we can write a simple function called build_my_report.\n\nbuild_my_report <- function(qmd_file=NULL,\n                            pseq_path = NULL,\n                            primary_var = NULL) {\n    \n    {\n        # params.lists <-\n        base_name <- qmd_file\n        base_name <- gsub(\".qmd\", \"\", base_name)\n        quarto::quarto_render(input = qmd_file,\n                              output_file = paste0(base_name, \"_report.html\"),\n                              quiet = FALSE,\n                              execute_params = list(\"pseq_path\" = pseq_path,\n                                                    \"primary_var\" = primary_var),\n                              execute_debug = FALSE,\n                              cache = NULL,\n                              cache_refresh = FALSE,\n                              debug = FALSE)\n        cat(\"HTML report created in output directory\\n\")\n    }\n}\n\nThe build_my_report function has three arguments.\n1. qmd_file = This is the name of the qmd template file i.e. basic_analysis.qmd\n2. pseq_path = This is the path to the phyloseq object for which we want to run the analysis.\n3. primary_var = This is the primary variable we want to investigate. Here, ILI is the column name in sample_data() of the phyloseq object FuentesIliGutData\n\nbuild_my_report(qmd_file=\"basic_analysis.qmd\",\n                pseq_path = \"data/FuentesIliGutData.rds\",\n                primary_var = \"ILI\")  \n\nThe rendered file can be found here"
  },
  {
    "objectID": "basic_analysis.html",
    "href": "basic_analysis.html",
    "title": "Microbiota Analysis",
    "section": "",
    "text": "library(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots"
  },
  {
    "objectID": "basic_analysis.html#define-parameters",
    "href": "basic_analysis.html#define-parameters",
    "title": "Microbiota Analysis",
    "section": "Define parameters",
    "text": "Define parameters\n\npseq_path = params$pseq_path\nprimary_var = params$primary_var"
  },
  {
    "objectID": "basic_analysis.html#read-data",
    "href": "basic_analysis.html#read-data",
    "title": "Microbiota Analysis",
    "section": "Read Data",
    "text": "Read Data\n\npseq <- readRDS(pseq_path)\n## Error in gzfile(file, \"rb\"): cannot open the connection"
  },
  {
    "objectID": "basic_analysis.html#check-reads",
    "href": "basic_analysis.html#check-reads",
    "title": "Microbiota Analysis",
    "section": "Check Reads",
    "text": "Check Reads\n\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'otu_table': object 'pseq' not found\n# Compare between groups\npseq |> \n    microbiome::meta() |> \n    ggplot(aes_string(primary_var, \"reads.per.sample\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'sample_data': object 'pseq' not found\n\nNote here that we have higher reads/sample in L2 group."
  },
  {
    "objectID": "basic_analysis.html#alpha-diversity",
    "href": "basic_analysis.html#alpha-diversity",
    "title": "Microbiota Analysis",
    "section": "Alpha diversity",
    "text": "Alpha diversity\n\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\n## Error in is(x): object 'pseq' not found\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\n## Error in is(x): object 'pseq' not found\np.shannon <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"shannon\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'sample_data': object 'pseq' not found\np.observed <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"observed\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'sample_data': object 'pseq' not found\n\np.shannon | p.observed\n## Error in eval(expr, envir, enclos): object 'p.shannon' not found"
  },
  {
    "objectID": "basic_analysis.html#correlation",
    "href": "basic_analysis.html#correlation",
    "title": "Microbiota Analysis",
    "section": "Correlation",
    "text": "Correlation\nCheck if reads per sample is correlated to Shannon diversity\n\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"shannon\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'sample_data': object 'pseq' not found\np.observed.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"observed\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n## Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'sample_data': object 'pseq' not found\n\np.shanon.cor | p.observed.cor\n## Error in eval(expr, envir, enclos): object 'p.shanon.cor' not found\n\n\nsessionInfo()\n## R version 4.2.1 (2022-06-23 ucrt)\n## Platform: x86_64-w64-mingw32/x64 (64-bit)\n## Running under: Windows 10 x64 (build 19044)\n## \n## Matrix products: default\n## \n## locale:\n## [1] LC_COLLATE=English_United States.utf8 \n## [2] LC_CTYPE=English_United States.utf8   \n## [3] LC_MONETARY=English_United States.utf8\n## [4] LC_NUMERIC=C                          \n## [5] LC_TIME=English_United States.utf8    \n## \n## attached base packages:\n## [1] stats     graphics  grDevices utils     datasets  methods   base     \n## \n## other attached packages:\n## [1] patchwork_1.1.2   ggpubr_0.4.0      microbiome_1.18.0 ggplot2_3.3.6    \n## [5] phyloseq_1.40.0  \n## \n## loaded via a namespace (and not attached):\n##  [1] Biobase_2.56.0         tidyr_1.2.0            jsonlite_1.8.0        \n##  [4] splines_4.2.1          foreach_1.5.2          carData_3.0-5         \n##  [7] assertthat_0.2.1       stats4_4.2.1           GenomeInfoDbData_1.2.8\n## [10] yaml_2.3.5             backports_1.4.1        pillar_1.8.1          \n## [13] lattice_0.20-45        glue_1.6.2             digest_0.6.29         \n## [16] XVector_0.36.0         ggsignif_0.6.3         colorspace_2.0-3      \n## [19] htmltools_0.5.3        Matrix_1.5-1           plyr_1.8.7            \n## [22] pkgconfig_2.0.3        broom_1.0.1            zlibbioc_1.42.0       \n## [25] purrr_0.3.4            scales_1.2.1           Rtsne_0.16            \n## [28] tibble_3.1.7           mgcv_1.8-40            car_3.1-0             \n## [31] generics_0.1.3         IRanges_2.30.0         ellipsis_0.3.2        \n## [34] withr_2.5.0            BiocGenerics_0.42.0    cli_3.3.0             \n## [37] survival_3.3-1         magrittr_2.0.3         crayon_1.5.1          \n## [40] evaluate_0.16          fansi_1.0.3            nlme_3.1-157          \n## [43] MASS_7.3-57            rstatix_0.7.0          vegan_2.6-2           \n## [46] tools_4.2.1            data.table_1.14.2      lifecycle_1.0.2       \n## [49] stringr_1.4.1          Rhdf5lib_1.18.2        S4Vectors_0.34.0      \n## [52] munsell_0.5.0          cluster_2.1.3          Biostrings_2.64.0     \n## [55] ade4_1.7-19            compiler_4.2.1         GenomeInfoDb_1.32.2   \n## [58] rlang_1.0.5            rhdf5_2.40.0           grid_4.2.1            \n## [61] RCurl_1.98-1.6         iterators_1.0.14       rhdf5filters_1.8.0    \n## [64] biomformat_1.24.0      rstudioapi_0.14        htmlwidgets_1.5.4     \n## [67] igraph_1.3.1           bitops_1.0-7           rmarkdown_2.16        \n## [70] gtable_0.3.1           codetools_0.2-18       multtest_2.52.0       \n## [73] abind_1.4-5            DBI_1.1.3              reshape2_1.4.4        \n## [76] R6_2.5.1               knitr_1.40             dplyr_1.0.9           \n## [79] fastmap_1.1.0          utf8_1.2.2             permute_0.9-7         \n## [82] ape_5.6-2              stringi_1.7.6          parallel_4.2.1        \n## [85] Rcpp_1.0.8.3           vctrs_0.4.1            tidyselect_1.1.2      \n## [88] xfun_0.31"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Automate Microbiome Analysis Using Quarto",
    "section": "",
    "text": "As a microbiome researcher, we are often working on different data sets. One thing we have to acknowledge is the fact that several basic analysis are same. We look at the data in few steps, quality check, calculating and visualization of alpha and beta diversity as well the compostion between groups. These are standard tasks that are routinely performed. We usually end up copy pasting codes or if we forget repeat the procedure of writing code and searching stack overflow or GitHub issues.\nWhat if we could automate these analysis? Recently, I was intrigued by discussions around the development of Quarto by Posit (formerly RStudio).\nIf you are already using Rmarkdown (.rmd) you will find the quarto document (.qmd) very similar. Below you can see an simple example. Here, the analysis includes reading the phyloseq object stored as *.rds file, calculating reads per sample, Shannon diversity, Observed ASVs and investigating if there is a correlation between reads per sample and Shannon diversity, Observed ASVs.\nBecause all you’re doing is writing a small example script, you just grab a few variables at random and plot them in a pretty simple Quarto document. That .qmd looks like this:\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n---\n\n## Load libraries  \n```{r}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Read Data  \n```{r}\npseq <- readRDS(\"data/FuentesIliGutData.rds\")\n```\n\n## Check Reads  \n```{r}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\npseq |> \n    microbiome::meta() |> \n    ggplot(aes(ILI, reads.per.sample)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\n\nNote here that we have higher reads/sample in L2 group.  \n## Alpha diversity  \n```{r}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes(ILI, shannon)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes(ILI, observed)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation  \nCheck if reads per sample is correlated to Shannon diversity \n\n```{r}\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, shannon)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, observed)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{r}\nsessionInfo()\n```\nThis simple task is pretty much repeated for every 16S rRNA gene profiling project that I am involved. Seems redundant to write/copy the codes everything. Here two things will change based on the project, the input phyloseq object and the primary variable of interest i.e. ILI.\nHere, quarto is handy with its params options. Which can be specified as shown below.\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\nNotice the pseq_path: pseq_path and primary_var: primary_var. These are the ‘floating’ variables. We can write a simple function that will process the .qmd file which we call ‘basic_analysis.qmd’ see here and store it in our RProject directory. Below is the draft of this file.\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\n    toc: true\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\n\n## Load libraries\n\n```{r}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Define parameters  \n```{r}\npseq_path = params$pseq_path\nprimary_var = params$primary_var\n```\n\n\n## Read Data\n```{r}\npseq <- readRDS(pseq_path)\n```\n\n## Check Reads\n```{r}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\n\n# notice here the use of ase_string instead of aes for ggplot. Since our primary variable 'primary_var' will be in quotes, we can use this handy option in ggplot2  \npseq |> \n    microbiome::meta() |> \n    ggplot(aes_string(primary_var, \"reads.per.sample\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\nNote here that we have higher reads/sample in L2 group.\\\n\n## Alpha diversity\n```{r}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"shannon\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes_string(ILI, \"observed\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation\nCheck if reads per sample is correlated to Shannon diversity\n```{r}\n\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"shannon\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"observed\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{r}\nsessionInfo()\n```\nNow to render this report we can write a simple function called build_my_report.\n\nbuild_my_report <- function(qmd_file=NULL,\n                            pseq_path = NULL,\n                            primary_var = NULL) {\n    \n    {\n        # params.lists <-\n        base_name <- qmd_file\n        base_name <- gsub(\".qmd\", \"\", base_name)\n        quarto::quarto_render(input = qmd_file,\n                              output_file = paste0(base_name, \"_report.html\"),\n                              quiet = FALSE,\n                              execute_params = list(\"pseq_path\" = pseq_path,\n                                                    \"primary_var\" = primary_var),\n                              execute_debug = FALSE,\n                              cache = NULL,\n                              cache_refresh = FALSE,\n                              debug = FALSE)\n        cat(\"HTML report created in output directory\\n\")\n    }\n}\n\nThe build_my_report function has three arguments.\n1. qmd_file = This is the name of the qmd template file i.e. basic_analysis.qmd\n2. pseq_path = This is the path to the phyloseq object for which we want to run the analysis.\n3. primary_var = This is the primary variable we want to investigate. Here, ILI is the column name in sample_data() of the phyloseq object FuentesIliGutData\n\nbuild_my_report(qmd_file=\"basic_analysis.qmd\",\n                pseq_path = \"data/FuentesIliGutData.rds\",\n                primary_var = \"ILI\")  \n\nThe rendered file can be found here"
  }
]