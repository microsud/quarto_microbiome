{
  "hash": "16cd4aa28696e9b3bf6eafdb6110fe85",
  "result": {
    "markdown": "---\ntitle: \"Automate Microbiome Analysis Using Quarto\"\nauthor: \"Sudarshan A. Shetty\"\nformat: html\neditor: visual\n---\n\n\nAs a microbiome researcher, we are often working on different data sets. One thing we have to acknowledge is the fact that several basic analysis are same. We look at the data in few steps, quality check, calculating and visualization of alpha and beta diversity as well the compostion between groups. These are standard tasks that are routinely performed. We usually end up copy pasting codes or if we forget repeat the procedure of writing code and searching *stack overflow* or *GitHub* issues.\\\nWhat if we could automate these analysis? Recently, I was intrigued by discussions around the development of `Quarto` by [Posit](https://posit.co/) (formerly RStudio).\n\nIf you are already using Rmarkdown (.rmd) you will find the quarto document (.qmd) very similar. Below you can see an simple example. Here, the analysis includes reading the phyloseq object stored as \\*.rds file, calculating reads per sample, Shannon diversity, Observed ASVs and investigating if there is a correlation between reads per sample and Shannon diversity, Observed ASVs.\n\nThe .qmd file is similar to .rmd:  \n\n```` markdown\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n---\n\n## Load libraries  \n```{{r}}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Read Data  \n```{{r}}\npseq <- readRDS(\"data/FuentesIliGutData.rds\")\n```\n\n## Check Reads  \n```{{r}}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\npseq |> \n    microbiome::meta() |> \n    ggplot(aes(ILI, reads.per.sample)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\n\nNote here that we have higher reads/sample in L2 group.  \n## Alpha diversity  \n```{{r}}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes(ILI, shannon)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes(ILI, observed)) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation  \nCheck if reads per sample is correlated to Shannon diversity \n\n```{{r}}\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, shannon)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes(reads.per.sample, observed)) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{{r}}\nsessionInfo()\n```\n````\n\n\n\nThis simple task is pretty much repeated for every 16S rRNA gene profiling project that I am involved. Seems redundant to write/copy the codes everything. Here two things will change based on the project, the input **phyloseq object** and the primary variable of interest i.e. **ILI**.  \nI came across this post by Mike Mahoney [How to use Quarto for Parameterized Reporting](https://www.mm218.dev/posts/2022-08-04-how-to-use-quarto-for-parameterized-reporting/). This inspired me to try `quarto` for automating my analysis.  \n\nSo the quarto has a handy option called the `params` and it can be used in the .qmd file as shown below.\n\n```` markdown\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\n\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\n\n````\n\n\n\nNotice the `pseq_path: pseq_path` and `primary_var: primary_var`. These are the 'floating' variables. We can write a simple function that will process the .qmd file which we call 'basic_analysis.qmd' and store it in our *RProject* directory. Below is the draft of this file.\nYou will notice that `ILI` is now replaced with `primary_var` in the .qmd file in the plotting `aes_string`.  \n\n```` markdown\n---\ntitle: \"Microbiota Analysis\"\nauthor: Sudarshan A. Shetty\ndate: \"2023-01-06\"\nformat:\n  html:\n    code-tools: true\n    code-fold: false\n    code-copy: true\n    self-contained: true\n    toc-location: left\nknitr: \n    opts_chunk: \n        collapse: TRUE\n        dpi: 150\n        message: FALSE\n        warning: FALSE\n        error: TRUE\neditor: visual\nparams:\n    pseq_path: pseq_path\n    primary_var: primary_var\n---\n\n## Load libraries\n\n```{{r}}\nlibrary(phyloseq)\nlibrary(microbiome)\nlibrary(ggpubr) # stats with viz\nlibrary(patchwork) # combine plots \n```\n\n## Define parameters  \n```{{r}}\npseq_path = params$pseq_path\nprimary_var = params$primary_var\n```\n\n\n## Read Data\n```{{r}}\npseq <- readRDS(pseq_path)\n```\n\n## Check Reads\n```{{r}}\n# add reads/sample to sample_data()\nsample_data(pseq)$reads.per.sample <- sample_sums(pseq)\n# Compare between groups\n\n# notice here the use of ase_string instead of aes for ggplot. Since our primary variable 'primary_var' will be in quotes, we can use this handy option in ggplot2  \npseq |> \n    microbiome::meta() |> \n    ggplot(aes_string(primary_var, \"reads.per.sample\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Reads/sample\")\n```\nNote here that we have higher reads/sample in L2 group.\\\n\n## Alpha diversity\n```{{r}}\n# we can add shannon diversity to sample_data(pseq)\nsample_data(pseq)$shannon <- microbiome::diversity(pseq, index=\"shannon\")[,1]\nsample_data(pseq)$observed <- microbiome::richness(pseq, index=\"observed\")[,1]\np.shannon <- meta(pseq) |> \n    ggplot(aes_string(primary_var, \"shannon\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Shannon Diversity\")\np.observed <- meta(pseq) |> \n    ggplot(aes_string(primary_var, \"observed\")) +\n    geom_violin()+\n    geom_boxplot(width=0.2) +\n    labs(x=\"\", y=\"Observed ASVs\")\n\np.shannon | p.observed\n```\n\n## Correlation\nCheck if reads per sample is correlated to Shannon diversity\n```{{r}}\n\np.shanon.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"shannon\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2)+\n    labs(x=\"Reads/sample\", y=\"Shannon Diversity\")\np.observed.cor <- meta(pseq) |> \n    ggplot(aes_string(\"reads.per.sample\", \"observed\")) +\n    geom_point() +\n    geom_smooth(method = \"lm\") +\n    ggpubr::stat_cor(method = \"spearman\", label.y = 2) +\n    labs(x=\"Reads/sample\", y=\"Observed ASVs\")\n\np.shanon.cor | p.observed.cor\n```\n\n```{{r}}\nsessionInfo()\n```\n````\n\n\n\nNow to render this report we can write a simple function called `build_my_report`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_my_report <- function(qmd_file=NULL,\n                            pseq_path = NULL,\n                            primary_var = NULL) {\n    \n    {\n        # params.lists <-\n        base_name <- qmd_file\n        base_name <- gsub(\".qmd\", \"\", base_name)\n        quarto::quarto_render(input = qmd_file,\n                              output_file = paste0(base_name, \"_report.html\"),\n                              quiet = FALSE,\n                              execute_params = list(\"pseq_path\" = pseq_path,\n                                                    \"primary_var\" = primary_var),\n                              execute_debug = FALSE,\n                              cache = NULL,\n                              cache_refresh = FALSE,\n                              debug = FALSE)\n        cat(\"HTML report created in output directory\\n\")\n    }\n}\n```\n:::\n\n\nThe `build_my_report` function has three arguments. \\\n1. `qmd_file` = This is the name of the qmd template file i.e. `basic_analysis.qmd`\\\n2. `pseq_path` = This is the path to the `phyloseq object` for which we want to run the analysis.\\\n3. `primary_var` = This is the primary variable we want to investigate. Here, *ILI* is the column name in `sample_data()` of the phyloseq object `FuentesIliGutData`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_my_report(qmd_file=\"basic_analysis.qmd\",\n                pseq_path = \"data/FuentesIliGutData.rds\",\n                primary_var = \"ILI\")  \n```\n:::\n\n\nThe rendered file can be found **Example Report**!  \n\nI hope you find this useful.  \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}